<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Phishing URL Detector</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .risk-indicator {
            height: 10px;
            transition: width 0.5s ease-in-out;
        }
        .domain-part {
            padding: 2px 4px;
            border-radius: 3px;
        }
    </style>
</head>
<body class="bg-gray-50 min-h-screen flex items-center justify-center p-4">
    <div class="bg-white rounded-xl shadow-lg p-6 w-full max-w-2xl">
        <h1 class="text-2xl font-bold text-gray-800 mb-6">üåê Phishing URL Analyzer</h1>
        
        <div class="space-y-6">
            <div>
                <label for="url-input" class="block text-sm font-medium text-gray-700 mb-1">Enter URL to Analyze</label>
                <div class="flex">
                    <input type="text" id="url-input" class="flex-grow px-4 py-2 border rounded-l-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="https://example.com">
                    <button id="analyze-btn" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-r-lg">Analyze</button>
                </div>
            </div>

            <div id="results" class="hidden space-y-4">
                <div class="border-b pb-4">
                    <h3 class="font-medium text-lg mb-2">Domain Analysis</h3>
                    <div id="domain-display" class="text-sm font-mono bg-gray-100 p-2 rounded"></div>
                </div>

                <div>
                    <div class="flex justify-between text-sm mb-1">
                        <span>Phishing Risk:</span>
                        <span id="risk-text" class="font-medium">Low</span>
                    </div>
                    <div class="w-full bg-gray-200 rounded-full h-2.5">
                        <div id="risk-indicator" class="risk-indicator h-2.5 rounded-full bg-green-500" style="width: 20%"></div>
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div class="bg-blue-50 p-4 rounded-lg">
                        <h3 class="font-medium text-blue-800 mb-2">Security Checks</h3>
                        <ul id="security-checks" class="text-sm space-y-2">
                            <!-- Filled by JavaScript -->
                        </ul>
                    </div>

                    <div class="bg-yellow-50 p-4 rounded-lg">
                        <h3 class="font-medium text-yellow-800 mb-2">Potential Issues</h3>
                        <ul id="potential-issues" class="text-sm space-y-2">
                            <!-- Filled by JavaScript -->
                        </ul>
                    </div>
                </div>

                <div class="bg-gray-50 p-4 rounded-lg">
                    <h3 class="font-medium text-gray-800 mb-2">Domain Information</h3>
                    <div id="domain-info" class="text-sm space-y-1">
                        <!-- Filled by JavaScript -->
                    </div>
                </div>
            </div>

            <div id="known-phishing-db" class="hidden bg-red-50 p-4 rounded-lg">
                <h3 class="font-medium text-red-800 mb-2">‚ö†Ô∏è Known Phishing Patterns Detected</h3>
                <ul id="phishing-matches" class="text-sm space-y-1">
                    <!-- Filled by JavaScript -->
                </ul>
            </div>
        </div>
    </div>

    <script>
        document.getElementById('analyze-btn').addEventListener('click', analyzeURL);

        function analyzeURL() {
            const urlInput = document.getElementById('url-input').value.trim();
            if (!urlInput) return;

            // Basic URL parsing
            let url;
            try {
                url = new URL(urlInput.includes('://') ? urlInput : `https://${urlInput}`);
            } catch {
                alert('Invalid URL format');
                return;
            }

            const domain = url.hostname;
            const results = document.getElementById('results');
            results.classList.remove('hidden');

            // Display domain with parts highlighted
            const domainParts = domain.split('.');
            const domainDisplay = document.getElementById('domain-display');
            domainDisplay.innerHTML = domainParts.map(part => 
                `<span class="domain-part ${isSuspiciousPart(part) ? 'bg-red-200' : 'bg-green-200'}">${part}</span>`
            ).join('<span class="text-gray-400">.</span>');

            // Perform checks
            const checks = [
                { id: 'https', text: 'Uses HTTPS', passed: url.protocol === 'https:' },
                { id: 'subdomain', text: 'Reasonable subdomains', passed: !hasExcessiveSubdomains(domain) },
                { id: 'typosquatting', text: 'No obvious typosquatting', passed: !isTyposquatting(domain) },
                { id: 'shortener', text: 'Not a URL shortener', passed: !isShortenerDomain(domain) },
                { id: 'ip', text: 'Not an IP address', passed: !/^(\d+\.){3}\d+$/.test(domain) }
            ];

            // Known phishing patterns (simplified)
            const phishingPatterns = [
                { pattern: 'paypa1', description: 'Misspelled "paypal"' },
                { pattern: 'login', description: 'Generic "login" in domain' },
                { pattern: 'secure', description: 'Generic "secure" in domain' },
                { pattern: 'account', description: 'Generic "account" in domain' }
            ];

            const foundPhishing = phishingPatterns.filter(p => domain.includes(p.pattern));

            // Update UI
            updateSecurityChecks(checks);
            updateRiskIndicator(checks, foundPhishing.length);
            updateDomainInfo(url);
            
            if (foundPhishing.length > 0) {
                const phishingDb = document.getElementById('known-phishing-db');
                phishingDb.classList.remove('hidden');
                const list = document.getElementById('phishing-matches');
                list.innerHTML = foundPhishing.map(p => 
                    `<li>‚úîÔ∏è Detected "${p.pattern}" (${p.description})</li>`
                ).join('');
            } else {
                document.getElementById('known-phishing-db').classList.add('hidden');
            }
        }

        function updateSecurityChecks(checks) {
            const list = document.getElementById('security-checks');
            list.innerHTML = checks.map(check => `
                <li class="flex items-center">
                    <span class="mr-2">${check.passed ? '‚úì' : '‚úñ'}</span>
                    <span class="${check.passed ? 'text-green-700' : 'text-red-700'}">${check.text}</span>
                </li>
            `).join('');
        }

        function updateRiskIndicator(checks, phishingCount) {
            const passedChecks = checks.filter(c => c.passed).length;
            const totalChecks = checks.length;
            const baseScore = (passedChecks / totalChecks) * 100;
            const phishingPenalty = phishingCount * 20;
            const finalScore = Math.max(0, baseScore - phishingPenalty);

            const indicator = document.getElementById('risk-indicator');
            const text = document.getElementById('risk-text');

            indicator.style.width = `${finalScore}%`;
            
            if (finalScore > 70) {
                indicator.style.backgroundColor = '#10b981';
                text.textContent = 'Low Risk';
            } else if (finalScore > 40) {
                indicator.style.backgroundColor = '#f59e0b';
                text.textContent = 'Medium Risk';
            } else {
                indicator.style.backgroundColor = '#ef4444';
                text.textContent = 'High Risk';
            }
        }

        function updateDomainInfo(url) {
            const info = document.getElementById('domain-info');
            info.innerHTML = `
                <div><span class="font-medium">Full URL:</span> ${url.href}</div>
                <div><span class="font-medium">Protocol:</span> ${url.protocol}</div>
                <div><span class="font-medium">Domain:</span> ${url.hostname}</div>
                <div><span class="font-medium">Path:</span> ${url.pathname}</div>
                ${url.search ? `<div><span class="font-medium">Query:</span> ${url.search}</div>` : ''}
            `;
        }

        function isSuspiciousPart(part) {
            return part.length > 15 || /[\d]{4,}/.test(part) || /(login|secure|account)/i.test(part);
        }

        function hasExcessiveSubdomains(domain) {
            return domain.split('.').length > 3;
        }

        function isTyposquatting(domain) {
            const popularDomains = ['google', 'facebook', 'amazon', 'paypal', 'apple'];
            return popularDomains.some(popular => 
                domain.includes(popular) && domain !== `${popular}.com`
            );
        }

        function isShortenerDomain(domain) {
            const shorteners = ['bit.ly', 'goo.gl', 'tinyurl.com', 'ow.ly'];
            return shorteners.includes(domain);
        }
    </script>
</body>
</html>
