<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Password Strength Checker</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .strength-meter {
            height: 8px;
            transition: width 0.3s, background-color 0.3s;
        }
        .tooltip {
            visibility: hidden;
            opacity: 0;
            transition: opacity 0.3s;
        }
        .has-tooltip:hover .tooltip {
            visibility: visible;
            opacity: 1;
        }
    </style>
</head>
<body class="bg-gray-50 min-h-screen flex items-center justify-center p-4">
    <div class="bg-white rounded-xl shadow-lg p-6 w-full max-w-md">
        <h1 class="text-2xl font-bold text-gray-800 mb-6">üîí Password Strength Analyzer</h1>
        
        <div class="space-y-4">
            <div>
                <label for="password" class="block text-sm font-medium text-gray-700 mb-1">Enter Password</label>
                <div class="relative">
                    <input type="password" id="password" class="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="Type your password...">
                    <button id="toggle-visibility" class="absolute right-3 top-2.5 text-gray-500 hover:text-gray-700">
                        üëÅÔ∏è
                    </button>
                </div>
            </div>

            <div class="space-y-2">
                <div class="flex justify-between text-sm">
                    <span>Password Strength:</span>
                    <span id="strength-text" class="font-medium">Weak</span>
                </div>
                <div class="w-full bg-gray-200 rounded-full h-2">
                    <div id="strength-meter" class="strength-meter h-2 rounded-full bg-red-500" style="width: 20%"></div>
                </div>
            </div>

            <div class="bg-blue-50 p-4 rounded-lg">
                <h3 class="font-medium text-blue-800 mb-2">Password Requirements</h3>
                <ul id="requirements" class="text-sm space-y-1 text-blue-700">
                    <li class="flex items-center" data-requirement="length"><span class="mr-2">‚úñ</span> At least 8 characters</li>
                    <li class="flex items-center" data-requirement="uppercase"><span class="mr-2">‚úñ</span> Contains uppercase letters</li>
                    <li class="flex items-center" data-requirement="lowercase"><span class="mr-2">‚úñ</span> Contains lowercase letters</li>
                    <li class="flex items-center" data-requirement="number"><span class="mr-2">‚úñ</span> Contains numbers</li>
                    <li class="flex items-center" data-requirement="special"><span class="mr-2">‚úñ</span> Contains special characters</li>
                </ul>
            </div>

            <div class="has-tooltip relative">
                <button id="suggest-password" class="text-sm text-blue-600 hover:text-blue-800">
                    üîÑ Generate Strong Password
                </button>
                <div class="tooltip absolute z-10 w-48 p-2 mt-2 text-sm text-white bg-gray-900 rounded-lg shadow-lg">
                    Click to generate a secure 12-character password
                </div>
            </div>
        </div>
    </div>

    <script>
        const passwordInput = document.getElementById('password');
        const toggleBtn = document.getElementById('toggle-visibility');
        const strengthMeter = document.getElementById('strength-meter');
        const strengthText = document.getElementById('strength-text');
        const requirements = document.querySelectorAll('#requirements li');
        const suggestBtn = document.getElementById('suggest-password');

        // Toggle password visibility
        toggleBtn.addEventListener('click', () => {
            if (passwordInput.type === 'password') {
                passwordInput.type = 'text';
                toggleBtn.textContent = 'üîí';
            } else {
                passwordInput.type = 'password';
                toggleBtn.textContent = 'üëÅÔ∏è';
            }
        });

        // Check password strength
        passwordInput.addEventListener('input', () => {
            const password = passwordInput.value;
            let strength = 0;
            
            // Check requirements
            const hasLength = password.length >= 8;
            const hasUpper = /[A-Z]/.test(password);
            const hasLower = /[a-z]/.test(password);
            const hasNumber = /[0-9]/.test(password);
            const hasSpecial = /[^A-Za-z0-9]/.test(password);

            // Update requirement indicators
            updateRequirement('length', hasLength);
            updateRequirement('uppercase', hasUpper);
            updateRequirement('lowercase', hasLower);
            updateRequirement('number', hasNumber);
            updateRequirement('special', hasSpecial);

            // Calculate strength
            if (hasLength) strength++;
            if (hasUpper) strength++;
            if (hasLower) strength++;
            if (hasNumber) strength++;
            if (hasSpecial) strength++;

            // Update UI
            const percent = strength * 20;
            strengthMeter.style.width = `${percent}%`;
            
            // Set color and text
            if (strength <= 1) {
                strengthMeter.style.backgroundColor = '#ef4444';
                strengthText.textContent = 'Weak';
            } else if (strength <= 3) {
                strengthMeter.style.backgroundColor = '#f59e0b';
                strengthText.textContent = 'Moderate';
            } else {
                strengthMeter.style.backgroundColor = '#10b981';
                strengthText.textContent = 'Strong';
            }
        });

        // Generate strong password
        suggestBtn.addEventListener('click', () => {
            const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()';
            let password = '';
            for (let i = 0; i < 12; i++) {
                password += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            passwordInput.value = password;
            passwordInput.dispatchEvent(new Event('input'));
        });

        function updateRequirement(type, met) {
            const element = document.querySelector(`[data-requirement="${type}"]`);
            if (met) {
                element.querySelector('span').textContent = '‚úì';
                element.querySelector('span').classList.add('text-green-500');
                element.querySelector('span').classList.remove('text-red-500');
            } else {
                element.querySelector('span').textContent = '‚úñ';
                element.querySelector('span').classList.add('text-red-500');
                element.querySelector('span').classList.remove('text-green-500');
            }
        }
    </script>
</body>
</html>
